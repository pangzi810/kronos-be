package com.devhour.infrastructure.repository;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.devhour.domain.model.entity.User;
import com.devhour.infrastructure.mapper.UserMapper;
import com.devhour.presentation.dto.DeletedUserSearchCriteria;

@ExtendWith(MockitoExtension.class)
class UserRepositoryImplTest {

    @Mock
    private UserMapper userMapper;

    private UserRepositoryImpl repository;

    @BeforeEach
    void setUp() {
        repository = new UserRepositoryImpl(userMapper);
    }

    @Test
    void testFindById_Found() {
        String userId = "user123";
        User expectedUser = createTestUser(userId, "testuser");
        
        when(userMapper.findById(userId)).thenReturn(Optional.of(expectedUser));
        
        Optional<User> result = repository.findById(userId);
        
        assertTrue(result.isPresent());
        assertEquals(expectedUser, result.get());
        verify(userMapper).findById(userId);
    }

    @Test
    void testFindById_NotFound() {
        String userId = "nonexistent";
        
        when(userMapper.findById(userId)).thenReturn(Optional.empty());
        
        Optional<User> result = repository.findById(userId);
        
        assertFalse(result.isPresent());
        verify(userMapper).findById(userId);
    }

    @Test
    void testFindByUsername_Found() {
        String username = "testuser";
        User expectedUser = createTestUser("user123", username);
        
        when(userMapper.findByUsername(username)).thenReturn(Optional.of(expectedUser));
        
        Optional<User> result = repository.findByUsername(username);
        
        assertTrue(result.isPresent());
        assertEquals(expectedUser, result.get());
        verify(userMapper).findByUsername(username);
    }

    @Test
    void testFindByUsername_NotFound() {
        String username = "nonexistent";
        
        when(userMapper.findByUsername(username)).thenReturn(Optional.empty());
        
        Optional<User> result = repository.findByUsername(username);
        
        assertFalse(result.isPresent());
        verify(userMapper).findByUsername(username);
    }

    @Test
    void testFindByEmail_Found() {
        String email = "test@example.com";
        User expectedUser = createTestUser("user123", "testuser", email);
        
        when(userMapper.findByEmail(email)).thenReturn(Optional.of(expectedUser));
        
        Optional<User> result = repository.findByEmail(email);
        
        assertTrue(result.isPresent());
        assertEquals(expectedUser, result.get());
        verify(userMapper).findByEmail(email);
    }

    @Test
    void testFindByEmail_NotFound() {
        String email = "nonexistent@example.com";
        
        when(userMapper.findByEmail(email)).thenReturn(Optional.empty());
        
        Optional<User> result = repository.findByEmail(email);
        
        assertFalse(result.isPresent());
        verify(userMapper).findByEmail(email);
    }

    @Test
    void testFindAll() {
        List<User> expectedUsers = Arrays.asList(
            createTestUser("user1", "user1"),
            createTestUser("user2", "user2")
        );
        
        when(userMapper.findAll()).thenReturn(expectedUsers);
        
        List<User> result = repository.findAll();
        
        assertEquals(2, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findAll();
    }

    @Test
    void testFindAll_Empty() {
        when(userMapper.findAll()).thenReturn(Arrays.asList());
        
        List<User> result = repository.findAll();
        
        assertTrue(result.isEmpty());
        verify(userMapper).findAll();
    }

    @Test
    void testSave_NewUser() {
        User user = createTestUser("newUser", "newuser");
        
        when(userMapper.findById("newUser")).thenReturn(Optional.empty());
        
        User result = repository.save(user);
        
        assertEquals(user, result);
        verify(userMapper).findById("newUser");
        verify(userMapper).insert(
            eq("newUser"),
            eq("newuser"),
            eq("newuser@example.com"),
            eq("hashedPassword"),
            eq("DEVELOPER"),
            eq("Test User"),
            eq(User.UserStatus.ACTIVE),
            eq(null),
            any(LocalDateTime.class),
            any(LocalDateTime.class)
        );
    }

    @Test
    void testSave_ExistingUser() {
        User existingUser = createTestUser("existingUser", "existinguser");
        
        when(userMapper.findById("existingUser")).thenReturn(Optional.of(existingUser));
        
        User result = repository.save(existingUser);
        
        assertEquals(existingUser, result);
        verify(userMapper).findById("existingUser");
        verify(userMapper).update(
            eq("existingUser"),
            eq("existinguser"),
            eq("existinguser@example.com"),
            eq("Test User"),
            any(LocalDateTime.class)
        );
    }

    @Test
    void testUpdateActiveStatus_Active() {
        String userId = "user123";
        
        repository.updateActiveStatus(userId, true);
        
        verify(userMapper).updateActiveStatus(eq(userId), eq(User.UserStatus.ACTIVE), any(LocalDateTime.class));
    }

    @Test
    void testUpdateActiveStatus_Inactive() {
        String userId = "user123";
        
        repository.updateActiveStatus(userId, false);
        
        verify(userMapper).updateActiveStatus(eq(userId), eq(User.UserStatus.INACTIVE), any(LocalDateTime.class));
    }
    
    @Test
    void testUpdateUserStatus() {
        String userId = "user123";
        User.UserStatus status = User.UserStatus.SUSPENDED;
        
        repository.updateUserStatus(userId, status);
        
        verify(userMapper).updateUserStatus(eq(userId), eq(status), any(LocalDateTime.class));
    }
    
    @Test
    void testUpdateLastLoginAt() {
        String userId = "user123";
        LocalDateTime loginTime = LocalDateTime.now();
        
        repository.updateLastLoginAt(userId, loginTime);
        
        verify(userMapper).updateLastLoginAt(eq(userId), eq(loginTime), any(LocalDateTime.class));
    }

    @Test
    void testUpdatePassword() {
        String userId = "user123";
        String newPasswordHash = "newHashedPassword";
        
        repository.updatePassword(userId, newPasswordHash);
        
        verify(userMapper).updatePassword(eq(userId), eq(newPasswordHash), any(LocalDateTime.class));
    }

    // Duplicate methods removed - already exist above

    @Test
    void testDeleteById_ThrowsUnsupportedOperationException() {
        String userId = "user123";
        
        assertThrows(UnsupportedOperationException.class, () -> {
            repository.deleteById(userId);
        });
        
        // Verify that no mapper methods are called since exception is thrown
        verifyNoMoreInteractions(userMapper);
    }

    @Test
    void testExistsByUsername_True() {
        String username = "testuser";
        
        when(userMapper.existsByUsername(username)).thenReturn(true);
        
        boolean result = repository.existsByUsername(username);
        
        assertTrue(result);
        verify(userMapper).existsByUsername(username);
    }

    @Test
    void testExistsByUsername_False() {
        String username = "nonexistent";
        
        when(userMapper.existsByUsername(username)).thenReturn(false);
        
        boolean result = repository.existsByUsername(username);
        
        assertFalse(result);
        verify(userMapper).existsByUsername(username);
    }

    @Test
    void testExistsByEmail_True() {
        String email = "test@example.com";
        
        when(userMapper.existsByEmail(email)).thenReturn(true);
        
        boolean result = repository.existsByEmail(email);
        
        assertTrue(result);
        verify(userMapper).existsByEmail(email);
    }

    @Test
    void testExistsByEmail_False() {
        String email = "nonexistent@example.com";
        
        when(userMapper.existsByEmail(email)).thenReturn(false);
        
        boolean result = repository.existsByEmail(email);
        
        assertFalse(result);
        verify(userMapper).existsByEmail(email);
    }

    @Test
    void testExistsById_True() {
        String userId = "user123";
        User user = createTestUser(userId, "testuser");
        
        when(userMapper.findById(userId)).thenReturn(Optional.of(user));
        
        boolean result = repository.existsById(userId);
        
        assertTrue(result);
        verify(userMapper).findById(userId);
    }

    @Test
    void testExistsById_False() {
        String userId = "nonexistent";
        
        when(userMapper.findById(userId)).thenReturn(Optional.empty());
        
        boolean result = repository.existsById(userId);
        
        assertFalse(result);
        verify(userMapper).findById(userId);
    }

    @Test
    void testFindAllActive() {
        List<User> expectedUsers = Arrays.asList(
            createTestUser("user1", "activeuser1"),
            createTestUser("user2", "activeuser2")
        );
        
        when(userMapper.findAllActive()).thenReturn(expectedUsers);
        
        List<User> result = repository.findAllActive();
        
        assertEquals(2, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findAllActive();
    }

    @Test
    void testFindActiveByRole_Developer() {
        User.Role role = User.Role.DEVELOPER;
        List<User> expectedUsers = Arrays.asList(
            createTestUser("dev1", "developer1"),
            createTestUser("dev2", "developer2")
        );
        
        when(userMapper.findActiveByRole("DEVELOPER")).thenReturn(expectedUsers);
        
        List<User> result = repository.findActiveByRole(role);
        
        assertEquals(2, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findActiveByRole("DEVELOPER");
    }

    @Test
    void testFindActiveByRole_PMO() {
        User.Role role = User.Role.PMO;
        List<User> expectedUsers = Arrays.asList(
            createTestUser("pmo1", "pmouser1")
        );
        
        when(userMapper.findActiveByRole("PMO")).thenReturn(expectedUsers);
        
        List<User> result = repository.findActiveByRole(role);
        
        assertEquals(1, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findActiveByRole("PMO");
    }

    @Test
    void testFindActiveDevelopers_Success() {
        List<User> expectedUsers = Arrays.asList(
            createTestUser("dev1", "developer1"),
            createTestUser("dev2", "developer2"),
            createTestUser("dev3", "developer3")
        );
        
        when(userMapper.selectActiveDevelopers()).thenReturn(expectedUsers);
        
        List<User> result = repository.findActiveDevelopers();
        
        assertEquals(3, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).selectActiveDevelopers();
    }

    @Test
    void testFindActiveDevelopers_EmptyList() {
        when(userMapper.selectActiveDevelopers()).thenReturn(Arrays.asList());
        
        List<User> result = repository.findActiveDevelopers();
        
        assertTrue(result.isEmpty());
        verify(userMapper).selectActiveDevelopers();
    }

    @Test
    void testFindActiveDevelopers_MapperException() {
        when(userMapper.selectActiveDevelopers()).thenThrow(new RuntimeException("Database connection error"));
        
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            repository.findActiveDevelopers();
        });
        
        assertTrue(exception.getMessage().contains("アクティブな開発者の取得に失敗しました"));
        assertTrue(exception.getMessage().contains("Database connection error"));
        verify(userMapper).selectActiveDevelopers();
    }

    @Test
    void testSearchByFullName() {
        String fullNamePattern = "%Test%";
        List<User> expectedUsers = Arrays.asList(
            createTestUser("user1", "testuser1"),
            createTestUser("user2", "testuser2")
        );
        
        when(userMapper.searchByFullName(fullNamePattern)).thenReturn(expectedUsers);
        
        List<User> result = repository.searchByFullName(fullNamePattern);
        
        assertEquals(2, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).searchByFullName(fullNamePattern);
    }

    @Test
    void testSearchByFullName_NoResults() {
        String fullNamePattern = "%NonExistent%";
        
        when(userMapper.searchByFullName(fullNamePattern)).thenReturn(Arrays.asList());
        
        List<User> result = repository.searchByFullName(fullNamePattern);
        
        assertTrue(result.isEmpty());
        verify(userMapper).searchByFullName(fullNamePattern);
    }

    @Test
    void testSearchUsers_AllParameters() {
        String username = "test";
        String email = "test@example.com";
        User.Role role = User.Role.DEVELOPER;
        Boolean isActive = true;
        
        List<User> expectedUsers = Arrays.asList(createTestUser("user1", "testuser"));
        
        when(userMapper.searchUsers(username, email, "DEVELOPER", isActive))
            .thenReturn(expectedUsers);
        
        List<User> result = repository.searchUsers(username, email, role, isActive);
        
        assertEquals(1, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).searchUsers(username, email, "DEVELOPER", isActive);
    }
    
    @Test
    void testFindByRoleAndStatus_PMOActive() {
        User.Role role = User.Role.PMO;
        boolean isActive = true;
        List<User> expectedUsers = Arrays.asList(
            createTestUser("pmo1", "pmouser1"),
            createTestUser("pmo2", "pmouser2")
        );
        
        when(userMapper.findByRoleAndStatus("PMO", true)).thenReturn(expectedUsers);
        
        List<User> result = repository.findByRoleAndStatus(role, isActive);
        
        assertEquals(2, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findByRoleAndStatus("PMO", true);
    }
    
    @Test
    void testFindByRoleAndStatus_PMOInactive() {
        User.Role role = User.Role.PMO;
        boolean isActive = false;
        List<User> expectedUsers = Arrays.asList(
            createTestUser("pmo3", "pmouser3")
        );
        
        when(userMapper.findByRoleAndStatus("PMO", false)).thenReturn(expectedUsers);
        
        List<User> result = repository.findByRoleAndStatus(role, isActive);
        
        assertEquals(1, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findByRoleAndStatus("PMO", false);
    }
    
    @Test
    void testFindByRoleAndStatus_RuntimeException() {
        User.Role role = User.Role.PMO;
        boolean isActive = true;
        
        when(userMapper.findByRoleAndStatus("PMO", true))
            .thenThrow(new RuntimeException("Database error"));
        
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            repository.findByRoleAndStatus(role, isActive);
        });
        
        assertTrue(exception.getMessage().contains("ロールとステータスによるユーザー取得に失敗しました"));
    }
    
    @Test
    void testFindAllByRole_PMO() {
        User.Role role = User.Role.PMO;
        List<User> expectedUsers = Arrays.asList(
            createTestUser("pmo1", "pmouser1"),
            createTestUser("pmo2", "pmouser2"),
            createTestUser("pmo3", "pmouser3")
        );
        
        when(userMapper.findAllByRole("PMO")).thenReturn(expectedUsers);
        
        List<User> result = repository.findAllByRole(role);
        
        assertEquals(3, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).findAllByRole("PMO");
    }
    
    @Test
    void testFindAllByRole_RuntimeException() {
        User.Role role = User.Role.PMO;
        
        when(userMapper.findAllByRole("PMO"))
            .thenThrow(new RuntimeException("Database error"));
        
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            repository.findAllByRole(role);
        });
        
        assertTrue(exception.getMessage().contains("ロールによるユーザー取得に失敗しました"));
    }

    @Test
    void testSearchUsers_NullRole() {
        String username = "test";
        String email = "test@example.com";
        Boolean isActive = true;
        
        List<User> expectedUsers = Arrays.asList(createTestUser("user1", "testuser"));
        
        when(userMapper.searchUsers(username, email, null, isActive))
            .thenReturn(expectedUsers);
        
        List<User> result = repository.searchUsers(username, email, null, isActive);
        
        assertEquals(1, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).searchUsers(username, email, null, isActive);
    }

    @Test
    void testSearchUsers_NullParameters() {
        List<User> expectedUsers = Arrays.asList(
            createTestUser("user1", "user1"),
            createTestUser("user2", "user2")
        );
        
        when(userMapper.searchUsers(null, null, null, null))
            .thenReturn(expectedUsers);
        
        List<User> result = repository.searchUsers(null, null, null, null);
        
        assertEquals(2, result.size());
        assertEquals(expectedUsers, result);
        verify(userMapper).searchUsers(null, null, null, null);
    }


    @Test
    void testCountDeletedUsers_Success() {
        // Given
        DeletedUserSearchCriteria criteria = new DeletedUserSearchCriteria();
        criteria.setRole("DEVELOPER");
        criteria.setDeletedFrom(LocalDate.of(2023, 1, 1));
        criteria.setDeletedTo(LocalDate.of(2023, 12, 31));
        criteria.setSearch("test");
        
        when(userMapper.countDeletedUsers(
            "DEVELOPER",
            LocalDate.of(2023, 1, 1),
            LocalDate.of(2023, 12, 31),
            "test"
        )).thenReturn(25L);
        
        // When
        long result = repository.countDeletedUsers(criteria);
        
        // Then
        assertEquals(25L, result);
        verify(userMapper).countDeletedUsers("DEVELOPER", LocalDate.of(2023, 1, 1), LocalDate.of(2023, 12, 31), "test");
    }

    @Test
    void testCountDeletedUsers_ZeroResult() {
        // Given
        DeletedUserSearchCriteria criteria = new DeletedUserSearchCriteria();
        criteria.setRole("ADMIN");
        
        when(userMapper.countDeletedUsers(
            "ADMIN",
            null,
            null,
            null
        )).thenReturn(0L);
        
        // When
        long result = repository.countDeletedUsers(criteria);
        
        // Then
        assertEquals(0L, result);
        verify(userMapper).countDeletedUsers("ADMIN", null, null, null);
    }

    @Test
    void testCountDeletedUsers_DatabaseException() {
        // Given
        DeletedUserSearchCriteria criteria = new DeletedUserSearchCriteria();
        criteria.setRole("PMO");
        criteria.setSearch("pmo");
        
        when(userMapper.countDeletedUsers(
            "PMO",
            null,
            null,
            "pmo"
        )).thenThrow(new RuntimeException("Database timeout"));
        
        // When & Then
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            repository.countDeletedUsers(criteria);
        });
        
        assertTrue(exception.getMessage().contains("削除済みユーザー数のカウントに失敗しました"));
        assertTrue(exception.getMessage().contains("Database timeout"));
        verify(userMapper).countDeletedUsers("PMO", null, null, "pmo");
    }

    @Test
    void testCountDeletedUsers_MyBatisException() {
        // Given
        DeletedUserSearchCriteria criteria = new DeletedUserSearchCriteria();
        criteria.setRole("DEVELOPER");
        criteria.setDeletedFrom(LocalDate.of(2023, 6, 1));
        criteria.setDeletedTo(LocalDate.of(2023, 6, 30));
        
        when(userMapper.countDeletedUsers(
            "DEVELOPER",
            LocalDate.of(2023, 6, 1),
            LocalDate.of(2023, 6, 30),
            null
        )).thenThrow(new org.mybatis.spring.MyBatisSystemException("MyBatis configuration error", new RuntimeException()));
        
        // When & Then
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            repository.countDeletedUsers(criteria);
        });
        
        assertTrue(exception.getMessage().contains("削除済みユーザー数のカウントに失敗しました"));
        assertTrue(exception.getCause() instanceof org.mybatis.spring.MyBatisSystemException);
        verify(userMapper).countDeletedUsers("DEVELOPER", LocalDate.of(2023, 6, 1), LocalDate.of(2023, 6, 30), null);
    }

    private User createTestUser(String id, String username) {
        return createTestUser(id, username, username + "@example.com");
    }
    
    private User createTestUser(String id, String username, String email) {
        return User.restore(
            id,
            username,
            email,
            "hashedPassword",
            User.Role.DEVELOPER,
            "Test User",
            true,
            LocalDateTime.now(),
            LocalDateTime.now()
        );
    }
    
    private User createDeletedTestUser(String id, String username) {
        return User.restore(
            id,
            username,
            username + "@example.com",
            "hashedPassword",
            User.Role.DEVELOPER,
            "Deleted Test User",
            false, // inactive (deleted)
            LocalDateTime.now().minusDays(30),
            LocalDateTime.now().minusDays(1)
        );
    }
}