buildscript {
	dependencies {
		classpath("org.flywaydb:flyway-mysql:11.11.0")
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'org.flywaydb.flyway' version '11.11.0'
}

group = 'com.devhour'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

// Integration Test Source Set
sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integrationTest/java')
		}
		resources {
			srcDir file('src/integrationTest/resources')
		}
	}
}

// 重複ファイルの処理戦略を設定
tasks.named('processIntegrationTestResources') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	// Exclude Okta from test classpath to prevent EnvironmentPostProcessor issues
	testImplementation {
		exclude group: 'com.okta.spring', module: 'okta-spring-boot-starter'
		exclude group: 'com.okta.commons'
		exclude group: 'com.okta'
	}
	testRuntimeClasspath {
		exclude group: 'com.okta.spring', module: 'okta-spring-boot-starter'
		exclude group: 'com.okta.commons'
		exclude group: 'com.okta'
	}
	// Integration test configurations
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
	integrationTestCompileOnly.extendsFrom testCompileOnly
	integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

dependencies {
	testImplementation platform('org.testcontainers:testcontainers-bom:1.21.3')
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core:11.1.0'
	implementation 'org.flywaydb:flyway-mysql:11.11.0'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.5'
	
	// Kafka dependencies
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	
	// Spring Retry dependencies for JIRA sync resilience
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'
	
	// ShedLock dependencies for distributed scheduling
	implementation 'net.javacrumbs.shedlock:shedlock-spring:5.10.2'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:5.10.2'
	
	// OpenAPI/Swagger dependencies
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	
	// Okta OAuth2 Integration
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.7'
	
	// JWT dependencies
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	
	// HTTP client for JIRA REST API
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
	implementation 'org.apache.httpcomponents.core5:httpcore5:5.2'
	implementation 'org.apache.httpcomponents.core5:httpcore5-h2:5.2'
	
	// Apache Velocity Template Engine
	implementation 'org.apache.velocity:velocity-engine-core:2.3'
	
	// Dotenv support
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'
	
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Spring Boot Configuration Processor (generates metadata for custom properties)
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.5'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
	
	// Add HTTP client dependencies for tests (needed by some Spring configurations)
	testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
	testImplementation 'org.apache.httpcomponents.core5:httpcore5:5.2'
}

flyway {
    url = 'jdbc:mysql://localhost:3306/devhour_db'
    user = 'devhour_user'
    password = 'devhour_password'
    locations = ['filesystem:src/main/resources/db/migration']
    cleanDisabled = false
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport

	// 統合テストを除外（MapperとRepositoryテストはintegrationTestで実行）
	exclude '**/infrastructure/mapper/**'
	exclude '**/infrastructure/repository/**'
	exclude '**/domain/repository/**'
	exclude '**/DevelopmentHourManagementApplicationTests.class'
}

// Integration Test Task
task integrationTest(type: Test) {
	description = 'Runs integration tests with Testcontainers (Mapper tests)'
	group = 'verification'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	useJUnitPlatform()
	shouldRunAfter test

	// Testcontainers configuration for Rancher Desktop
	systemProperty 'testcontainers.docker.socket.override', '/var/run/docker.sock'
	environment 'TESTCONTAINERS_RYUK_DISABLED', 'true'
	environment 'TESTCONTAINERS_CHECKS_DISABLE', 'true'
	environment 'DOCKER_HOST', 'unix:///Users/toshihiro/.rd/docker.sock'

	// レポート出力先を分離
	reports {
		html.outputLocation = file("${buildDir}/reports/tests/integrationTest")
		junitXml.outputLocation = file("${buildDir}/test-results/integrationTest")
	}
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test
	// 統合テストは明示的に実行した場合のみカバレッジに含める
	executionData.setFrom(fileTree(dir: "$buildDir/jacoco", includes: ["**/*.exec"]))
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}

	// ユニットテストと統合テストの両方のカバレッジを集約
	getSourceDirectories().setFrom(files(sourceSets.main.allSource.srcDirs))
	getClassDirectories().setFrom(files(sourceSets.main.output))
}

// 統合テストのカバレッジレポート（オプション）
task jacocoIntegrationTestReport(type: JacocoReport) {
	dependsOn integrationTest
	executionData integrationTest
	sourceSets sourceSets.main
	reports {
		html.required = true
		xml.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
		rule {
			enabled = false
			element = 'CLASS'
			includes = ['com.devhour.domain.*']
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
